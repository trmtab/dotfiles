#
# Enable Powerlevel10k instant prompt.
# Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

#
# Color
#
export CLICOLOR=1

#
# zsh options
#
# https://zsh.sourceforge.io/Doc/Release/Options.html#Options

setopt NO_CASE_GLOB
setopt RM_STAR_SILENT
setopt EXTENDED_GLOB

setopt HIST_IGNORE_DUPS HIST_IGNORE_SPACE
HISTFILE=~/.zhistory
HISTSIZE=8192
SAVEHIST=8192

# vim keymap
bindkey -v
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^K" kill-line
bindkey "^P" history-search-backward
bindkey "^Q" push-line-or-edit
bindkey "^R" history-incremental-search-backward
bindkey "^Y" accept-and-hold

export EDITOR=vim

#
# brew
#
# Set HOMEBREW_PREFIX, etc.
eval "$(/opt/homebrew/bin/brew shellenv)"

# Opt out of Homebrewâ€™s analytics
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1

# Activate p10k
source $HOMEBREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme
[[ ! -f $HOME/.p10k.zsh ]] || source $HOME/.p10k.zsh

export BROWSER='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'

#
# arkade
#
export PATH=$PATH:$HOME/.arkade/bin/

#
# go
#
export GOPATH=$HOME/go
export GOROOT="$HOMEBREW_PREFIX/opt/go/libexec"
export PATH="${PATH:+${PATH}:}:${GOPATH}/bin:${GOROOT}/bin"

#
# pyenv
#
if which pyenv > /dev/null; then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)";
fi

#
# ruby
#
export PATH="$HOMEBREW_PREFIX/opt/ruby/bin:$PATH"

#
# nvm
#
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"

autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

#
# fzf
#
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Set $PATH to array-unique-special
typeset -aU path

#
# Functions / Aliases
#

dotenv() {
  local envfile=${1:-.env}
  if [ -f $envfile ]; then
    set -o allexport; source $envfile; set +o allexport
  else
    echo "error: $envfile does not exist" 1>&2
    return 1
  fi
}

g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status
  fi
}

alias -g py-clean='find . | grep -E "(/__pycache__$|\.pyc$|\.pyo$)" | xargs rm -rf'
alias -g py-versions='pyenv install --list | grep -E "^\s*[2-5]\.[0-9]+\.[0-9]+" | sed "s/ //g" | sort -Vr'
alias -g py-installed='pyenv versions | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"'
alias -g wanip4='dig @resolver4.opendns.com myip.opendns.com +short -4'
alias -g wanip6='dig @resolver1.ipv6-sandbox.opendns.com AAAA myip.opendns.com +short -6'

prune-git-branch() {
  local tmpfile=$(mktemp)
  git branch --merged \
    | grep -Ev "(master|main)" >$tmpfile \
    && vim $tmpfile \
    && xargs git branch -d <$tmpfile \
    && rm $tmpfile
}

#
# acme.sh
#
export PATH=$PATH:$HOME/.acme.sh/
 


# Set $PATH to array-unique-special
typeset -aU path

# pnpm
export PNPM_HOME="/Users/cconlin/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

#
# Functions / Aliases
#

[ -f ~/.zshaliases ] && source ~/.zshaliases

rand_str() {
  local len="${1:-16}"
  LC_ALL=C tr -dc 'A-Za-z0-9$%&,-./:;<=>@[\]^_`{|}~' </dev/urandom | head -c $len; echo
}

curip() {
  curl -s 'https://api.ipify.org?format=json' | jq -r '.ip'
}

# Docker
tail-docker-logs-json() {
  local container_name=$1
  docker logs -f $(docker ps -qf "name=${container_name}") | jq -R "fromjson? | . "
}

test-dockerignore() {
  docker image build --no-cache -t build-context -f - . <<EOF
FROM busybox
WORKDIR /build-context
COPY . .
CMD find .
EOF
}
 
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"

source "$HOME/.rye/env"

# bun completions
[ -s "/Users/cconlin/.bun/_bun" ] && source "/Users/cconlin/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
 
# PHP Composer
export PATH="$HOME/.composer/vendor/bin:$PATH"

# kubectl krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/cconlin/.docker/completions $fpath)

autoload -Uz compinit
compinit

{{/* vim: set filetype=zsh ts=2 sts=2 sw=2: */}}